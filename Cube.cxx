#include "Cube.h"

Cube::Cube() {
    for(int layer = 0; layer < C_LAYERS; ++layer)
        for(int y = 0; y < C_Y; ++y)
            for(int x = 0; x < C_X; ++x)
                cube_status[layer][y][x] = 0;
}

Cube::~Cube() {
    ;
}

void Cube::setVoxel(int x, int y, int layer, uchar value) {
    cube_status[layer][y][x] = value;
}

uchar Cube::getVoxel(int x, int y, int layer) {
    return cube_status[layer][y][x];
}

uint Cube::getLayerBitfield(int layer) {
    uint result = 0;
    for(int y = 0; y < C_Y; ++y)
        for(int x = 0; x < C_X; ++x)
            result |= (cube_status[layer][y][x]?1:0) << ((y*C_X) + x);
            
    return result;
}

uint Cube::getLayerBamBitfield(int layer, uchar bamPosition) {
    uint result = 0;
    unsigned char currentBamBit = getBamBitForPosition(bamPosition);
    for(int y = 0; y < C_Y; ++y)
        for(int x = 0; x < C_X; ++x)
            result |= (cube_status[layer][y][x] & currentBamBit)?1:0 << ((y*C_X) + x);
            
    return result;
}

const uchar Cube::getBamBitForPosition(const uchar x) {
    static const uchar msb_lut[256] =
        {
            0, 1, 2, 2, 4, 4, 4, 4, // 0000_0000 - 0000_0111
            8, 8, 8, 8, 8, 8, 8, 8, // 0000_1000 - 0000_1111
            16, 16, 16, 16, 16, 16, 16, 16, // 0001_0000 - 0001_0111
            16, 16, 16, 16, 16, 16, 16, 16, // 0001_1000 - 0001_1111
            32, 32, 32, 32, 32, 32, 32, 32, // 0010_0000 - 0010_0111
            32, 32, 32, 32, 32, 32, 32, 32, // 0010_1000 - 0010_1111
            32, 32, 32, 32, 32, 32, 32, 32, // 0011_0000 - 0011_0111
            32, 32, 32, 32, 32, 32, 32, 32, // 0011_1000 - 0011_1111

            64, 64, 64, 64, 64, 64, 64, 64, // 0100_0000 - 0100_0111
            64, 64, 64, 64, 64, 64, 64, 64, // 0100_1000 - 0100_1111
            64, 64, 64, 64, 64, 64, 64, 64, // 0101_0000 - 0101_0111
            64, 64, 64, 64, 64, 64, 64, 64, // 0101_1000 - 0101_1111
            64, 64, 64, 64, 64, 64, 64, 64, // 0110_0000 - 0110_0111
            64, 64, 64, 64, 64, 64, 64, 64, // 0110_1000 - 0110_1111
            64, 64, 64, 64, 64, 64, 64, 64, // 0111_0000 - 0111_0111
            64, 64, 64, 64, 64, 64, 64, 64, // 0111_1000 - 0111_1111

            128, 128, 128, 128, 128, 128, 128, 128, // 1000_0000 - 1000_0111
            128, 128, 128, 128, 128, 128, 128, 128, // 1000_1000 - 1000_1111
            128, 128, 128, 128, 128, 128, 128, 128, // 1001_0000 - 1001_0111
            128, 128, 128, 128, 128, 128, 128, 128, // 1001_1000 - 1001_1111
            128, 128, 128, 128, 128, 128, 128, 128, // 1010_0000 - 1010_0111
            128, 128, 128, 128, 128, 128, 128, 128, // 1010_1000 - 1010_1111
            128, 128, 128, 128, 128, 128, 128, 128, // 1011_0000 - 1011_0111
            128, 128, 128, 128, 128, 128, 128, 128, // 1011_1000 - 1011_1111

            128, 128, 128, 128, 128, 128, 128, 128, // 1100_0000 - 1100_0111
            128, 128, 128, 128, 128, 128, 128, 128, // 1100_1000 - 1100_1111
            128, 128, 128, 128, 128, 128, 128, 128, // 1101_0000 - 1101_0111
            128, 128, 128, 128, 128, 128, 128, 128, // 1101_1000 - 1101_1111
            128, 128, 128, 128, 128, 128, 128, 128, // 1110_0000 - 1110_0111
            128, 128, 128, 128, 128, 128, 128, 128, // 1110_1000 - 1110_1111
            128, 128, 128, 128, 128, 128, 128, 128, // 1111_0000 - 1111_0111
            128, 128, 128, 128, 128, 128, 128, 128, // 1111_1000 - 1111_1111
        };

	return msb_lut[x];
}
